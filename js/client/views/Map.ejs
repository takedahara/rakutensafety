<!DOCTYPE html>
<html>
  <head>
    <title>Custom Marker with Accuracy Circle</title>
    <script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA_dorTpJmEWFa1FS7uvbxRWN9wluuvNlA&callback=initMap&libraries=maps&v=beta">
    </script>
    <style>
      #map {
        height: 100%;
      }

      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }

      /* ポップアップスタイル */
      .popup {
        position: fixed;
        bottom: -200px; /* 初期位置は画面外 */
        left: 0;
        width: 100%;
        height: 200px; /* ポップアップの高さ */
        max-height: 300px; /* ポップアップの最大高さ */
        background-color: white;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        transition: bottom 0.3s;
        padding: 20px;
        box-sizing: border-box;
        z-index: 1000;
      }

      .popup.show {
        bottom: 0;
      }

      .popup-content {
        max-width: 600px;
        margin: 0 auto;
      }

      /* Back button style */
      .back-button {
        position: absolute;
        top: 10px;
        left: 10px;
        background-color: white;
        border: 1px solid #ccc;
        padding: 5px 10px;
        cursor: pointer;
        z-index: 1000;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }


    </style>
    <script>
      let map;

      function initMap() {
        getLocation();
      }

      function initializeMap(latitude, longitude, accuracy) {
        const currentLocation = new google.maps.LatLng(latitude, longitude);

        map = new google.maps.Map(document.getElementById('map'), {
          center: currentLocation,
          zoom: 15,
          mapId: 'DEMO_MAP_ID'
        });

        const marker = new google.maps.Marker({
          position: currentLocation,
          map: map,
          title: "Current Location",
          icon: {
            url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
          }
        });

        const accuracyCircle = new google.maps.Circle({
          map: map,
          radius: accuracy,
          center: currentLocation,
          fillColor: '#4299FF',
          fillOpacity: 0.2,
          strokeColor: '#4299FF',
          strokeOpacity: 0.4,
          strokeWeight: 2
        });

        sendLocationToServer(latitude, longitude);

        // Fetch additional locations from the server and add markers
        // fetchLocations();

        // マップクリックイベントリスナーを追加
        map.addListener('click', () => {
          hidePopup();
        });
      }

      function fetchLocations(data) {
        if (data && data.length > 0) {
          data.forEach(shelter => {
            const latitude = shelter.location.latitude;
            const longitude = shelter.location.longitude;
            const shelterid = shelter.id;

            // マーカーを追加する関数を呼び出す
            addMarker(latitude, longitude, shelterid);
          });
        }

        // console.log("取得した避難所情報:", data);
      }

      function getShelterInfo(id){
            
        fetch('/shelterInfo', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            shelterid: id
          })
        })
        .then(response => response.json())
        .then(data => {
          console.log(data);
        })
        .catch(error => {
          console.error('Error:', error);
        });
      }


      function addMarker(latitude, longitude, shelterid) {
        const location = new google.maps.LatLng(latitude, longitude);

        const marker = new google.maps.Marker({
          position: location,
          map: map,
          title: "Location",
          icon: {
            url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
          }
        });

        // const accuracyCircle = new google.maps.Circle({
        //   map: map,
        //   radius: accuracy,
        //   center: location,
        //   fillColor: '#FF6347',
        //   fillOpacity: 0.2,
        //   strokeColor: '#FF6347',
        //   strokeOpacity: 0.4,
        //   strokeWeight: 2
        // });

        marker.addListener('click', () => {
          getShelterInfo(shelterid);
          showPopup();
        });
      }

      function sendLocationToServer(latitude, longitude) {
        console.log('sending location to server');

        fetch('/CurrentLocation', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            latitude: latitude,
            longitude: longitude
          })
        })
        .then(response => response.json())
        .then(data => {
          console.log(data);
          fetchLocations(data);
        })
        .catch(error => {
          console.error('Error:', error);
        });
      }

      function getLocation() {
        if ("geolocation" in navigator) {
          navigator.geolocation.getCurrentPosition(position => {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            const accuracy = position.coords.accuracy;

            initializeMap(latitude, longitude, accuracy);
          }, showError);
        } else {
          alert('Geolocation is not supported by this browser.');
        }
      }

      function showError(error) {
        switch(error.code) {
          case error.PERMISSION_DENIED:
            alert('User denied the request for Geolocation.');
            break;
          case error.POSITION_UNAVAILABLE:
            alert('Location information is unavailable.');
            break;
          case error.TIMEOUT:
            alert('The request to get user location timed out.');
            break;
          case error.UNKNOWN_ERROR:
            alert('An unknown error occurred.');
            break;
        }
      }

      function showPopup() {
        const popup = document.getElementById('popup');
        popup.innerHTML = `<div class="popup-content">un</div>`;
        popup.classList.add('show');

      }

      function hidePopup() {
        const popup = document.getElementById('popup');
        popup.classList.remove('show');
      }

      function goBack() {
        // Perform the desired action, e.g., navigating back
        window.history.back();
      }

    </script>
  </head>
  <body>
    <div id="map" style="height: 100%;"></div>
    <div id="popup" class="popup"></div>
    <div class="back-button" onclick="goBack()">&larr; Back</div>
  </body>
</html>
