<!DOCTYPE html>
<html>
  <head>
    <title>Custom Marker with Accuracy Circle</title>
    <script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA_dorTpJmEWFa1FS7uvbxRWN9wluuvNlA&callback=initMap&libraries=maps&v=beta">
    </script>
    <style>
      #map {
        height: 100%;
      }

      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }

      /* ポップアップスタイル */
      .popup {
        position: fixed;
        bottom: -200px; /* 初期位置は画面外 */
        left: 0;
        width: 100%;
        max-height: 800px; /* ポップアップの最大高さ */
        background-color: white;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        transition: bottom 0.3s;
        padding: 20px;
        box-sizing: border-box;
        z-index: 1000;
        overflow-y: auto;
      }

      .popup.show {
        bottom: 0;
      }

      .popup-content {
        max-width: 1200px; /* Increased width for layout */
        margin: 0 auto;
        font-size: 48px; /* Double the original font size for larger text */
        line-height: 1.5;
        display: grid;
        grid-template-columns: 1fr 1fr; /* Two-column layout */
        gap: 40px;
      }

      .popup-content h2 {
        font-size: 70px; /* Double the original font size for headings */
        margin-bottom: 10px;
        grid-column: span 2; /* Make header span both columns */
        text-align: center;
      }

      .popup-content .section {
        display: flex;
        flex-direction: column;
        gap: 10px;
      }

      .popup-content table {
        width: 100%;
        border-collapse: collapse;
      }

      .popup-content th, .popup-content td {
        border: 1px solid #ccc;
        padding: 10px;
        text-align: left;
        font-size: 48px;
      }

      /* Button styles */
      .button-container {
        position: absolute;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 30px;
      }

      .back-button, .home2-button {
        background-color: white;
        border: 2px solid #ccc;
        padding: 30px 60px; /* Increased padding for larger buttons */
        font-size: 30px; /* Larger font size */
        font-weight: bold; /* Bold text */
        cursor: pointer;
        z-index: 1000;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        border-radius: 30px; /* More rounded corners */
        white-space: nowrap; /* Prevent text from wrapping */
        transition: background-color 0.3s, color 0.3s;
      }

      .back-button:hover, .home2-button:hover {
        background-color: #f0f0f0;
        color: #333;
      }
    </style>
    <script>
      let map;

      function initMap() {
        getLocation();
      }

      function initializeMap(latitude, longitude, accuracy) {
        const currentLocation = new google.maps.LatLng(latitude, longitude);

        map = new google.maps.Map(document.getElementById('map'), {
          center: currentLocation,
          zoom: 15,
          mapId: 'DEMO_MAP_ID'
        });

        const marker = new google.maps.Marker({
          position: currentLocation,
          map: map,
          title: "Current Location",
          icon: {
            url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
          }
        });

        const accuracyCircle = new google.maps.Circle({
          map: map,
          radius: accuracy,
          center: currentLocation,
          fillColor: '#4299FF',
          fillOpacity: 0.2,
          strokeColor: '#4299FF',
          strokeOpacity: 0.4,
          strokeWeight: 2
        });

        sendLocationToServer(latitude, longitude);

        // Fetch additional locations from the server and add markers
        // fetchLocations();

        // マップクリックイベントリスナーを追加
        map.addListener('click', () => {
          hidePopup();
        });
      }

      function fetchLocations(data) {
        if (data && data.length > 0) {
          data.forEach(shelter => {
            const latitude = shelter.location.latitude;
            const longitude = shelter.location.longitude;
            const shelterid = shelter.id;

            // マーカーを追加する関数を呼び出す
            addMarker(latitude, longitude, shelterid);
          });
        }

        // console.log("取得した避難所情報:", data);
      }

      async function getShelterInfo(id) {
        try {
          const response = await fetch('/shelterInfo', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              shelterid: id
            })
          });

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          const data = await response.json();

          const ret = {
            name: data.name,
            prefecture: data.prefecture,
            capacity: data.capacity,
            food: data.food,
            water: data.water,
            medicines: {
              medicine1: data.medicines.medicine1,
              medicine2: data.medicines.medicine2,
              medicine3: data.medicines.medicine3
            },
            stock: {
              medicine1: data.stock.medicine1,
              medicine2: data.stock.medicine2,
              medicine3: data.stock.medicine3
            },
            demand: {
              medicine1: data.demand.medicine1,
              medicine2: data.demand.medicine2,
              medicine3: data.demand.medicine3
            },
            daysSupply: {
              medicine1: data.daysSupply.medicine1,
              medicine2: data.daysSupply.medicine2,
              medicine3: data.daysSupply.medicine3
            }
          };

          console.log(data);
          console.log(ret);

          return ret;

        } catch (error) {
          console.error('Error:', error);
          return null;
        }
      }

      function addMarker(latitude, longitude, shelterid) {
        const location = new google.maps.LatLng(latitude, longitude);

        const marker = new google.maps.Marker({
          position: location,
          map: map,
          title: "Location",
          icon: {
            url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
          }
        });

        marker.addListener('click', async () => {
          const data = await getShelterInfo(shelterid);
          if (data) {
            console.log(data);
            showPopup(data);
          } else {
            console.error('Failed to retrieve shelter info');
          }
        });
      }

      function showPopup(data) {
        const popup = document.getElementById('popup');
        popup.innerHTML = `
          <div class="popup-content">
            <h2>${data.name}</h2>
            <div class="section">
              <h3>備蓄一覧</h3>
              <table>
                <tr><th>アイテム</th><th>数量</th></tr>
                <tr><td>食料</td><td>${data.food}</td></tr>
                <tr><td>水</td><td>${data.water}</td></tr>
              </table>
            </div>
            <div class="section">
              <h3>薬一覧</h3>
              <table>
                <tr><th>薬名</th><th>在庫</th><th>需要</th><th>供給日数</th></tr>
                <tr><td>薬1</td><td>${data.stock.medicine1}</td><td>${data.demand.medicine1}</td><td>${data.daysSupply.medicine1}</td></tr>
                <tr><td>薬2</td><td>${data.stock.medicine2}</td><td>${data.demand.medicine2}</td><td>${data.daysSupply.medicine2}</td></tr>
                <tr><td>薬3</td><td>${data.stock.medicine3}</td><td>${data.demand.medicine3}</td><td>${data.daysSupply.medicine3}</td></tr>
              </table>
            </div>
          </div>`;
        popup.classList.add('show');
      }

      function sendLocationToServer(latitude, longitude) {
        console.log('sending location to server');

        fetch('/CurrentLocation', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            latitude: latitude,
            longitude: longitude
          })
        })
        .then(response => response.json())
        .then(data => {
          console.log(data);
          fetchLocations(data);
        })
        .catch(error => {
          console.error('Error:', error);
        });
      }

      function getLocation() {
        if ("geolocation" in navigator) {
          navigator.geolocation.getCurrentPosition(position => {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            const accuracy = position.coords.accuracy;

            initializeMap(latitude, longitude, accuracy);
          }, showError);
        } else {
          alert('Geolocation is not supported by this browser.');
        }
      }

      function showError(error) {
        switch(error.code) {
          case error.PERMISSION_DENIED:
            alert('User denied the request for Geolocation.');
            break;
          case error.POSITION_UNAVAILABLE:
            alert('Location information is unavailable.');
            break;
          case error.TIMEOUT:
            alert('The request to get user location timed out.');
            break;
          case error.UNKNOWN_ERROR:
            alert('An unknown error occurred.');
            break;
        }
      }

      function hidePopup() {
        const popup = document.getElementById('popup');
        popup.classList.remove('show');
      }

      function goBack() {
        // Perform the desired action, e.g., navigating back
        window.history.back();
      }
    </script>
  </head>
  <body>
    <div id="map" style="height: 100%;"></div>
    <div id="popup" class="popup"></div>
    <div class="button-container">
      <div class="back-button" onclick="goBack()">ホームへ</div>
      <div class="home2-button" onclick="goBack()">避難所追加</div>
    </div>
  </body>
</html>
